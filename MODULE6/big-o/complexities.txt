--- --- --- --- --- --- --- 
--- --- --- --- --- --- --- 
O(1) AKA Constant
No matter the size of the input, the time it takes is always constant.  

function getLastElementFromArr (arr) { 
    return arr[arr.length - 1];
}


--- --- --- --- --- --- --- 
--- --- --- --- --- --- --- 
O(log (n)) AKA Logarithmic 
Divide and conquer. Divide in two until you're out of input. 
The dictionary example. Default base is two, but it could be 
a different base, you could do log base 3 or 10... Or, probably any number.

In mathematics, the logarithm is the inverse function to exponentiation. 
That means the logarithm of a given number x is the exponent to which 
another fixed number, the base b, must be raised, to produce that number x
log b2 (2) = 1 
log b2 (4) = 2
log b2 (8) = 3
log b2 (16) = 4
log b2 (32) = 5
log b2 (64) = 6 


--- --- --- --- --- --- --- 
--- --- --- --- --- --- --- 
O(n) AKA Linear 
Time it takes to execute grows parallel with size of input. 
Think iteration over input.
function printAllNums(arr) { 
    arr.forEach(console.log)
}


--- --- --- --- --- --- --- 
--- --- --- --- --- --- --- 
O(n^2) AKA Quadratic
Time it takes to execute grows in a squared manner.
Think nested loops over input. 

function nestedIteration (arr) {
    arr.forEach(el1 => { 
        arr.forEach(el2 => { 
            console.log(`${el1} ${el2}`)
        })
    })
}


--- --- --- --- --- --- --- 
--- --- --- --- --- --- --- 
O(n!) AKA Factorial
Scary. Think permutations. Time to execute is the product
of every number between 1 and input size. 

// [1,2,3]
// [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]

